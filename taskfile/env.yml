version: "3"

includes:
  config: ./config.yml

vars:
  DEPLOY_SUMMARY: '.docker/deployment_summary.json'

tasks:
  get-rpc:
    desc: "Get RPC URL"
    env:
      DEPLOY_ENV:
        sh: task get-deploy-status
    cmds:
      - |
        # Get deployment environment
        if [ ! -f .env ]; then
          cp .env.example .env
        fi

        # Get RPC URL based on environment
        if [ "$DEPLOY_ENV" = "LOCAL" ]; then
          grep "^LOCAL_ETHEREUM_RPC_URL=" .env | cut -d '=' -f2-
        elif [ "$DEPLOY_ENV" = "TESTNET" ]; then
          grep "^TESTNET_RPC_URL=" .env | cut -d '=' -f2-
        else
          echo "Unknown DEPLOY_ENV: $DEPLOY_ENV" >&2
          exit 1
        fi

  get-chain-id:
    desc: "Get chain ID"
    cmds:
      - |
        if [ ! -f .env ]; then
          cp .env.example .env
        fi
        grep "^CHAIN_ID=" .env | cut -d '=' -f2 | tr -d '\r\n'

  get-deploy-status:
    desc: "Get deployment environment status"
    cmds:
      - |
        # Get deployment environment
        if [ ! -f .env ]; then
          cp .env.example .env
        fi
        DEPLOY_ENV=$(grep "^DEPLOY_ENV=" .env | cut -d '=' -f2 | tr '[:lower:]' '[:upper:]' | tr -d '\r\n')
        echo "$DEPLOY_ENV"

  get-registry:
    desc: "Get WASI registry based on deployment environment"
    cmds:
      - |
        DEPLOY_ENV=$(task get-deploy-status)
        if [ "$DEPLOY_ENV" = "LOCAL" ]; then
          echo "localhost:8090"
        elif [ "$DEPLOY_ENV" = "TESTNET" ]; then
          echo "wa.dev"
        else
          echo "Unknown DEPLOY_ENV: $DEPLOY_ENV" >&2
          exit 1
        fi

  get-wasi-namespace:
    desc: "Get WASI package namespace"
    vars:
      REGISTRY: '{{.REGISTRY}}'
    cmds:
      - |
        # Auto-get registry if not provided
        REGISTRY="{{.REGISTRY}}"
        if [ -z "$REGISTRY" ]; then
          REGISTRY=$(task get-registry)
        fi

        # Get deployment environment
        if [ ! -f .env ]; then
          cp .env.example .env
        fi

        DEPLOY_ENV=$(task get-deploy-status)
        if [ "$DEPLOY_ENV" = "LOCAL" ]; then
          echo "example"
        else
          # Check for WASI_NAMESPACE in .env file
          WASI_NAMESPACE=$(grep "^WASI_NAMESPACE=" .env 2>/dev/null | cut -d '=' -f2 | tr -d '\r\n')
          if [ -z "$WASI_NAMESPACE" ]; then
            echo "Error: WASI_NAMESPACE must be set in .env file for non-LOCAL deployments" >&2
            echo "Please add WASI_NAMESPACE=your_namespace to your .env file" >&2
            exit 1
          fi
          echo "${WASI_NAMESPACE}"
        fi

  get-ipfs-gateway:
    desc: "Get IPFS gateway based on deployment environment"
    cmds:
      - |
        DEPLOY_ENV=$(task get-deploy-status)
        if [ "$DEPLOY_ENV" = "LOCAL" ]; then
          echo "http://127.0.0.1:8080/ipfs/"
        elif [ "$DEPLOY_ENV" = "TESTNET" ]; then
          echo "https://gateway.pinata.cloud/ipfs/"
        else
          echo "Unknown DEPLOY_ENV: $DEPLOY_ENV" >&2
          exit 1
        fi

  setup-avs-signing:
    desc: "Setup AVS signing keys for service"
    vars:
      HD_INDEX: '{{.HD_INDEX | default "1"}}'
      DEFAULT_ENV_FILE: '{{.DEFAULT_ENV_FILE | default "infra/wavs-1/.env"}}'
    cmds:
      - |
        # SERVICE_ID=`curl -s http://localhost:8000/services | jq -r ".services[{{.SERVICE_INDEX}}].id"`
        # if [ -z "$SERVICE_ID" ] || [ "$SERVICE_ID" == "null" ]; then
        #   echo "Error: SERVICE_ID is null or not found for index {{.SERVICE_INDEX}}." >&2
        #   exit 1
        # fi

        # wavs 0.5.2 changed this where there are no longer service ids to get from the app.
        # hardcoding for now :shrug: idk..
        HD_INDEX={{.HD_INDEX}}

        source {{.DEFAULT_ENV_FILE}}
        export OPERATOR_PRIVATE_KEY=`cast wallet private-key --mnemonic "$WAVS_SUBMISSION_MNEMONIC" --mnemonic-index 0`
        export AVS_SIGNING_ADDRESS=`cast wallet address --mnemonic-path "$WAVS_SUBMISSION_MNEMONIC" --mnemonic-index ${HD_INDEX}`

        echo "HD_INDEX=${HD_INDEX}"
        echo "SERVICE_ID=${SERVICE_ID}"
        echo "AVS_SIGNING_ADDRESS=${AVS_SIGNING_ADDRESS}"

        AVS_SIGNING_FILE=".docker/avs_signing.json"
        if [ ! -f ${AVS_SIGNING_FILE} ]; then
          echo "{}" > ${AVS_SIGNING_FILE}
        fi
        jq --arg key "$AVS_SIGNING_ADDRESS" \
           --arg hd_index "$HD_INDEX" \
           --arg service_id "$SERVICE_ID" \
           '.[$key] = {hd_index: $hd_index, service_id: $service_id}' \
           ${AVS_SIGNING_FILE} > .docker/avs_signing.tmp && mv .docker/avs_signing.tmp ${AVS_SIGNING_FILE}

  show-deploy-summary:
    desc: "Display all deployment addresses"
    preconditions:
      - test -f {{.DEPLOY_SUMMARY}}
    cmds:
      - |
        echo "ðŸ“‹ Deployment Summary"
        echo "===================="
        jq . {{.DEPLOY_SUMMARY}}
